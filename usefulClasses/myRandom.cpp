#include "myRandom.h"



int MyRandom::random(int m, int x) {
    //генерирует случайное число в диапазоне от 0 до m
    //основан на линейном конгруэтном методе
    //(на выходе случайна€ неповтор€ющаюс€ последовательность чисел от 0 до m 
    //эта последовательность при более чем m генераций начинает повтор€тьс€)
    //услови€:
    //(1)с и m взаимно простые(нет общих делителей)
    //(2)а-1 кратно каждому простому делителю m и 4,если m кратно 4
    int c = m - 1;//приращение 0<=c<m
    
    //x %= m //начальное значение 0<=x<=m
    int prime_factors_m = primeFactors(m);
    int a = (x % m) * prime_factors_m + 1; //множитель 0<=a<=m,
    //^ сгенерируем множитель перемножив все простые делители m, выполнив условие (2) 

    //«адача: необходимо найти такое число c в промежутке от 0 до m-1,
    //чтобы с не делилась ни на один простой множитель m
    //–ешение: рабоча€ функци€ дл€ нахождени€ делителей, 
    //попробую разделитель на два потока и сравнивать каждый найденный 
    //делитель m и n через глобальные(или общие) переменные 
    //позже это об€зательно нужно будет реализовать,но сначала в принципе 
    //попрактикуйс€ в многопоточности и вернись,
    //пока просто как нибудь
    c = 3;
    //while (primeFactors(c) != c) --c;//!!ѕ–ќЅЋ≈ћј!!
    x0 = (a * x + c) % m;
    return x0;

}

int MyRandom::primeFactors(int m) {
    int composition = 1;

    for (int i = 2; i < (int)(std::sqrt(m) + 1); ++i) {
        while (m % i == 0) {
            composition *= i;
            m = m / i;
        }
    }
    if (m != 1) composition *= m;
    return composition;
}

std::vector<int> MyRandom::GetRNums(int m) {
    x0 = time(NULL);
    std::vector<int> r_nums =  std::vector<int>(m);//не забудь потом освободить пам€ть
    for (int i = 0; i < m; ++i) {
        ( r_nums)[i] = MyRandom::random(m,x0);
    }
    return r_nums;

}
